#!/usr/bin/env python3

from urllib import request
import os
import subprocess
import sys
import inspect
import glob
import argparse
import time
from ng import NailgunConnection, NailgunException
try:
    from StringIO import StringIO
except ImportError:
    from io import StringIO

currentDir = os.path.dirname(inspect.getfile(inspect.currentframe()))
tauDir = os.path.join(os.getcwd(), '.tau')
coursier = os.path.join(tauDir, 'coursier')
nailgun_dep = 'com.facebook:nailgun-server:1.0.0'
scalaVersion = '2.12.8'
coursierVersion = '1.1.0-M14-7'

class SimpleBuild:

  def build(self, deps, sources, output):
    compileDeps = self.fetch_deps(deps)

    print('Compiling ' + output)

    output = self.compile_sources(compileDeps, sources, output)

    return {
      'compileDeps': compileDeps,
      'output': output
    }

  def fetch_deps(self, coords):
    if coords is None:
      return None

    coordsArgs = flatten([[coord] for coord in coords])

    with subprocess.Popen([coursier, 'fetch'] + coordsArgs + ['--classpath'],
      stdout=subprocess.PIPE,
      stderr=subprocess.PIPE) as fetch:

      stdout = fetch.communicate()[0]
      classpath = stdout.decode('utf-8').strip().split('\n')[-1]

      return classpath

  def compile_sources(self, classpath, sources, output):
    ensure_ng('scalac', boot_classpath_for(self.get_scala_deps()))

    exit = run_class_ng('scalac', 'scala.tools.nsc.Main', ['-d', output] + ['-cp', classpath] + sources)

    if exit == 0:
      print('Output to ' + output)
    else:
      raise Exception('Failed compiling ' + output + '. Exit code: ' + str(exit))

    return output

  def get_scala_deps(self):
    return self.fetch_deps(['org.scala-lang:scala-compiler:' + scalaVersion])

class BuildAgent:

  def __init__(self, depPaths, agentJar):
    self._depPaths = depPaths
    self._agentJar = agentJar

  def build(self, output, testClasses, deps = [], testDeps = [], sources = [], testSources = [], workDir = None):
    args = ['--automation']

    for dep in deps:
      args += ['--dep', dep]

    for dep in testDeps:
      args += ['--test-dep', dep]

    for source in testSources:
      args += ['--test-sources', source]

    if output is not None:
      args += ['--output', output]

    args += sources

    try:
      runtimeClasspath = run_class_with_output(self._depPaths, self._agentJar, 'letout.build.BuildAgent', args,
        workDir = workDir)

      print('== OUTP', runtimeClasspath)
    except ChildProcessError:
      print(str(output))


def setup_dir():
  try:
    os.makedirs(tauDir)
    print('Create dir', tauDir)
  except FileExistsError:
    pass

def fetch_coursier():
  print('Fetching coursier')

  with open(coursier, 'wb') as f:
    response = request.urlopen('https://git.io/coursier-cli')

    f.write(response.read())

  os.chmod(coursier, 0o744)

def run_class(bootClasspath, classpath, className, args = [], workDir = None):
  commandArgs = mk_java_command(bootClasspath, classpath, className, args)

  print(' '.join(commandArgs))

  result = subprocess.call(commandArgs, cwd = workDir)

  if result > 0:
    raise ChildProcessError('Command exited with ' + str(result))

def run_class_with_output(bootClasspath, classpath, className, args = [], workDir = None):
  commandArgs = mk_java_command(bootClasspath, classpath, className, args)

  print(' '.join(commandArgs))

  with subprocess.Popen(commandArgs, cwd = workDir, stdout=subprocess.PIPE, stderr=subprocess.PIPE) as p:

    output, err = p.communicate()
    result = p.returncode

    if result > 0:
      raise ChildProcessError('Command exited with ' + str(result))

    return output

def run_class_ng(name, className, args = []):
  with get_nailgun_connection(name) as c:
    exitCode = c.send_command(className, args)

    if exitCode == 898:
      raise Exception('No such command ' + className)

    return exitCode

def ensure_ng(name, bootClasspath, classpath = None):
  conn = get_nailgun_connection(name)

  if conn is not None:
    return conn

  domainSocket = get_domain_socket(name)

  try:
    os.unlink(domainSocket)
  except OSError:
    if os.path.exists(domainSocket):
        raise

  classpathArg = fetch_deps([nailgun_dep])

  if classpath is not None:
    classpathArg += ':' + classpath

  commandArgs = mk_java_command(bootClasspath, classpathArg, 'com.facebook.nailgun.NGServer', [get_transport_address(name)])

  p = subprocess.Popen(commandArgs,
                       cwd=os.getcwd(),
                       stdout=subprocess.PIPE,
                       stderr=subprocess.PIPE)

  print('Process created:', p.pid)

  conn = wait_for_connection(name, 1000)

  print('Server started with name "' + name + '"')

  return conn

def get_transport_address(name):
  return 'local:' + get_domain_socket(name)

def get_domain_socket(name):
  return tauDir + '/' + name

def wait_for_connection(name, timeout, start_time = time.time()):
  elapsed_time = time.time() - start_time

  while elapsed_time < timeout:
    conn = get_nailgun_connection(name)

    if conn is not None:
      return conn

  raise TimeoutError('Timeout of ' + str(timeout) + ' occurred. Elapsed ' + str(elapsed_time))

def get_nailgun_connection(name):
  try:
    return mk_nailgun_connection(name)
  except NailgunException:
    return None

def mk_nailgun_connection(name):
  return NailgunConnection(
      get_transport_address(name),
      cwd=os.getcwd()
  )

def mk_java_command(bootClasspath, classpath, className, args = []):
  if classpath is None:
    classpathArg = []
  else:
    classpathArg = ['-cp', classpath]

  return list(filter(lambda arg: len(arg) > 0, ['java', boot_classpath_for(bootClasspath)] + classpathArg + [className] + args))

def boot_classpath_for(classpath):
  if classpath is not None:
    return '-Xbootclasspath/a:{0}'.format(classpath)
  else:
    return ''

def compile_command(args):
  resolved_files = flatten([glob.glob(pattern, recursive=True) for pattern in args.files])
  deps = args.deps
  outputJar = args.jar[0]

  print('Compiling', resolved_files, 'to', outputJar)

  compile_sources(fetch_deps(args.deps), resolved_files, outputJar)

def init_build_agent():
  print('Fetching deps')

  build = SimpleBuild()


  sources = glob.glob(os.path.join(currentDir, 'src/main/scala/letout/build/*.scala'))
  output = os.path.join(tauDir, 'build-agent.jar')

  result = build.build(
    deps = [
      'io.get-coursier:coursier_2.12:' + coursierVersion,
      'io.get-coursier:coursier-cache_2.12:' + coursierVersion,
      'org.scala-lang:scala-compiler:' + scalaVersion,
      'org.specs2:specs2-core_2.12:4.7.0',
      'com.twitter:util-core_2.12:7.1.0',
      'com.github.scopt:scopt_2.12:3.5.0'
    ],
    sources = sources,
    output = output
  )

  return BuildAgent(
    depPaths = result['compileDeps'],
    agentJar = result['output']
  )

def init_letout(agent):
  result = agent.build(
    workDir = currentDir,
    deps = [
      'io.circe:circe-yaml_2.12:0.9.0',
      'io.circe:circe-generic_2.12:0.11.1',
      'io.monix:monix_2.12:3.0.0-8084549'
    ],
    testDeps = [
      'org.specs2:specs2-core_2.12:4.7.0'
    ],
    sources = ['src/main/scala/**/*.scala'],
    testSources = ['src/main/scala/**/*Spec.scala', 'src/test/scala/**/*.scala'],
    output = os.path.join(tauDir, 'letout.jar'),
    testClasses = os.path.join(tauDir, 'letout/test-classes'))

  run_class(result['bootClasspath'], result['classpath'], 'letout.MainApp')

def test(deps, mainJar, testSources):
    print(deps, mainJar, testSources)

def flatten(a):
    return [item for sublist in a for item in sublist]

parser = argparse.ArgumentParser(description='Letout basic build.')

compile_parsers = parser.add_subparsers(help='compile help')
compile_parser = compile_parsers.add_parser('compile')

compile_parser.set_defaults(func=compile_command)

compile_parser.add_argument('jar', metavar='output-jar', type=str, nargs=1,
                    help='Output JAR')

compile_parser.add_argument('files', metavar='file-pattern', type=str, nargs='*',
                    help='Files to get compiled')

compile_parser.add_argument('--dep', dest='deps', action='store',
                    help='Dependency to be used')

args = parser.parse_args()

if not vars(args):
    setup_dir()
    agent = init_build_agent()

    init_letout(agent)
else:
    print(args.func(args))