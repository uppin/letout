#!/usr/bin/env python3

from urllib import request
import os
import subprocess
import sys
import inspect
import glob

currentDir = os.path.dirname(inspect.getfile(inspect.currentframe()))
tauDir = os.path.join(os.getcwd(), '.tau')
coursier = os.path.join(tauDir, 'coursier')

def setup_dir():
  try:
    os.makedirs(tauDir)
    print('Create dir', tauDir)
  except FileExistsError:
    pass

def fetch_coursier():
  print('Fetching coursier')

  with open(coursier, 'wb') as f:
    response = request.urlopen('https://git.io/coursier-cli')

    f.write(response.read())

  os.chmod(coursier, 0o744)

def compile(bootClasspath, classpath):
  print('Compiling the tool')

  sources = glob.glob(os.path.join(currentDir, 'src/main/scala/**/*.scala'))
  output = os.path.join(tauDir, 'tool.jar')

  commandArgs = ['java', boot_classpath_for(bootClasspath), 'scala.tools.nsc.Main', '-d', output, '-cp', classpath] + sources

  exit = subprocess.call(commandArgs)

  if exit == 0:
    print('Output to ' + output)

  return output

def runClass(mainJar, bootClasspath, depsClasspath, className):
  commandArgs = ['java', boot_classpath_for(bootClasspath), '-cp', depsClasspath + ':' + mainJar, className]

  print(' '.join(commandArgs))

  subprocess.call(commandArgs)

def fetch_deps(coords):
  coordsArgs = flatten([[coord] for coord in coords])

  with subprocess.Popen([coursier, 'fetch'] + coordsArgs + ['--classpath'],
    stdout=subprocess.PIPE,
    stderr=subprocess.PIPE) as fetch:

    stdout = fetch.communicate()[0]
    classpath = stdout.decode('utf-8').strip().split('\n')[-1]

    return classpath

def boot_classpath_for(classpath):
  return '-Xbootclasspath/a:{0}'.format(classpath)

def flatten(a):
    return [item for sublist in a for item in sublist]

setup_dir()

print('Fetching deps')

compileDeps = fetch_deps(['io.circe:circe-yaml_2.12:0.9.0', 'io.circe:circe-generic_2.12:0.11.1'])

output = compile(fetch_deps(['org.scala-lang:scala-compiler:2.12.8']), compileDeps)

bootClasspath = fetch_deps(['org.scala-lang:scala-library:2.12.8'])

runClass(output, bootClasspath, compileDeps, 'tau.MainApp')

